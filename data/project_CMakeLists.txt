project(${PROJ_NAME})
cmake_minimum_required(VERSION 2.8)
set(OF_PATH ${OPENFRAMEWORKS_PATH})
include("${OF_PATH}/findOpenFrameworks-v0.9.cmake")
include(ofAddons.cmake)
include_directories(
    ${OF_INCLUDE_PATH}
    ${ADDONS_INCLUDE_PATH}
    )

aux_source_directory(. SRC_LIST)

add_executable(${PROJECT_NAME} ${SRC_LIST} ${ADDONS_SRC} ${ADDONS_HEADERS})

# Add sub directory if using precompiled lib is not available
if (USE_PRECOMPILED_LIB)
    target_link_libraries(${PROJECT_NAME} ${OF_LIBS} ${ADDONS_LIBS})
else()
    add_subdirectory("D:/Development/Tools/of_v0.9.0_vs_release/" openFrameworks)
    target_link_libraries(${PROJECT_NAME} openFrameworks ${OF_LIBS} ${ADDONS_LIBS})
endif(USE_PRECOMPILED_LIB)

# Set the executable's path to bin
set(APP_BIN_DIR "${CMAKE_BINARY_DIR}/bin")
set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY  "${APP_BIN_DIR}")

# If bin dir doesn't exist, create it
if (NOT ${APP_BIN_DIR})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E make_directory ${APP_BIN_DIR}
        )
endif()

# Copy the needed dlls based the architecture
if (WIN32)
    if (AR STREQUAL "x64")
        set(FMODEX_DLL_PATH ${OF_PATH}/export/vs/${AR}/fmodex64.dll)
        set(FMODEXL_DLL_PATH ${OF_PATH}/export/vs/${AR}/fmodexL64.dll)
    else()
        set(FMODEX_DLL_PATH ${OF_PATH}/export/vs/${AR}/fmodex.dll)
        set(FMODEXL_DLL_PATH ${OF_PATH}/export/vs/${AR}/fmodexL.dll)
    endif()

add_custom_command(
    TARGET ${PROJECT_NAME}
    PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${OF_PATH}/export/vs/${AR}/assimp.dll ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${FMODEX_DLL_PATH} ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${FMODEXL_DLL_PATH} ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${OF_PATH}/export/vs/${AR}/FreeImage.dll ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${OF_PATH}/export/vs/${AR}/freetype.dll ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${OF_PATH}/export/vs/${AR}/glut32.dll ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${OF_PATH}/export/vs/${AR}/libeay32.dll ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${OF_PATH}/export/vs/${AR}/ssleay32.dll ${APP_BIN_DIR}
        COMMAND ${CMAKE_COMMAND} -E copy ${OF_PATH}/export/vs/${AR}/Zlib.dll ${APP_BIN_DIR}
    )
endif(WIN32)
